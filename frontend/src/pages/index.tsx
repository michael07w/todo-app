import React from 'react'
import type { NextPage, GetServerSideProps } from 'next'
import Head from 'next/head'
import styles from '../../styles/Home.module.css'
import { useState } from 'react'
import classNames from 'classnames'
import { fetchQuery } from 'react-relay'
import { graphql } from 'babel-plugin-relay/macro'
import { RelayEnvironmentProvider, loadQuery, usePreloadedQuery } from 'react-relay/hooks'
import { useMutation, useQuery } from 'relay-hooks'
import { pagesIndexTaskListQuery } from './__generated__/pagesIndexTaskListQuery.graphql'
import { createEnvironment } from '../../lib/relay'
import { RecordMap } from 'relay-runtime/lib/store/RelayStoreTypes'


// Query to retrieve tasks
const taskListQuery = graphql`
query pagesIndexTaskListQuery {
  task_list {
    id
    description
    done
  }
}
`

// Mutation to update done status of a task
const taskFinishMutation = graphql`
mutation pagesTaskFinishMutation($input: ID!) {
  finish(id: $input) {
    id
    description
    done
  }
}
`

// Mutation to add tasks
const addTaskMutation = graphql`
mutation pagesAddTaskMutation($input: String!) {
  add(description: $input) {
    id
    description
    done
  }   
}
`


interface HomeProps {
  records: RecordMap
}


const Home: NextPage<HomeProps> = ({ records }) => {

  // Tracks new item
  const [todoItem, setTodoItem] = useState({description: "", id: "", done: false})

  // Store value returned by query
  const result = useQuery<pagesIndexTaskListQuery>(taskListQuery, {}, {})

  // Invoke useMutation hook
  const [finishMutate] = useMutation(taskFinishMutation)

  // Invoke useMutation hook
  const [addMutate, { loading }] = useMutation(
    addTaskMutation,
    {
      updater: (store, payload) => {
        const tasks = store.getPluralRootField('add')
        const root = store.getRoot()
        root.setLinkedRecords(tasks, 'task_list')
      }
    }
  )

  // Update value of new task when text is entered
  const handleChange = ({ target }) => {
    const { value } = target
    setTodoItem(prevTodoItem => ({...prevTodoItem, description: value}))
  }

  // Track which items have been completed
  const handleToggle = (id: String) => {
    finishMutate({ variables: { input: id }})
  }

  const handleClick = (description: String) => {
    if (todoItem.description) {
      addMutate({
        variables: {
          input: todoItem.description
        },
      })
      setTodoItem({id: "", description: "", done: false})
    }
  }

  return (
    <RelayEnvironmentProvider environment={createEnvironment(records)}>
      <div className={styles.container}>
        <Head>
          <title>Todo App</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className={styles.main}>
          <h1 className={styles.title}>
            Please enter your tasks below.
          </h1>
          <br />

          <h3>To-Do:</h3>
          <input type="text" value={todoItem.description} onChange={handleChange} />
          <br />

          <ul>
            {result.data?.task_list.map(({ description, id, done }) => (
              <li
                key={id}
                onClick={() => handleToggle(id)}
                className={classNames({ 'done': done })}
              >
                {description}
              </li>
            ))}
          </ul>

          <button onClick={() => handleClick(todoItem.description)}>
            Add
          </button>

        </main>
      </div>
    </RelayEnvironmentProvider>
  )
}

export const getServerSideProps: GetServerSideProps<HomeProps> = async() => {
  const env = createEnvironment()
  await fetchQuery(env, taskListQuery, {}).toPromise()

  return {
    props: {
      records: env.getStore().getSource().toJSON()
    }
  }
}


export default Home